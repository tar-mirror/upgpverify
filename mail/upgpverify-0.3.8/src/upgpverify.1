.\" Automatically generated by Pod::Man version 1.04
.\" Tue Oct  2 15:15:53 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "UPGPVERIFY 1"
.TH UPGPVERIFY 1 "0.3.8" "2001-10-02" "upgpverify"
.UC
.SH "NAME"
.Vb 1
\&         upgpverify - PGP wrapper for verifying messages
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
upgpverify [options] [tmp [program [arguments]]]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBupgpverify\fR verifies a \s-1PGP\s0 signed or encrypted and signed message
on stdin, checks the user id or key id against a database, if wanted,
and starts another program, providing the payload of the \s-1PGP\s0 message
on an own file descriptor.
.PP
\&\fBupgpverify\fR is designed to work under qmail. It can handle \s-1MIME\s0 
and non-MIME (traditional \s-1PGP\s0 format) messages. It handles 
base64 and quoted-printable.
.PP
\&\fIoptions\fR is a is a series of getopt or getopt_long style options. See
below for more information.
.PP
\&\fItmp\fR is a temporary directory. It must not be world writable.
You must provide \fItmp\fR if you want \fBupgpverify\fR to call another program
or if the input is read from a pipe.
.PP
\&\fBupgpverify\fR since version 0.3.2 handles input from pipes by creating
a temporary file.
.Sh "Access Control"
.IX Subsection "Access Control"
Access control is done in the following order:
.Ip "1." 4
\&\fBupgpverify\fR tries to verify the \s-1PGP\s0 signature. It exits with an
appropriate exit code (100 or 111) if this fails. This means the
signers public key has to be in the key ring used.
.Ip "2." 4
If the \fI\*(--rules\fR option is used then:
.RS 4
.Ip "2a." 8
.IX Item "2a."
The signers fingerprint is checked against the rules database. Goto 2g
if successful.
.Sp
This can only be checked with \s-1GPG\s0.
.Ip "2b." 8
.IX Item "2b."
The signers long key id is checked against the rules database. Goto 2g
if successful.
.Sp
This can only be checked with \s-1GPG\s0.
.Ip "2c." 8
.IX Item "2c."
The signers short key id is checked against the rules database. Goto 2g
if successful.
.Ip "2d." 8
.IX Item "2d."
The full user id of the key is checked against the rules
database.  Goto 2g if successful.
.Ip "2e." 8
.IX Item "2e."
The user id is parsed and all email addresses found therein
are checked against the rule database. Goto 2g if successful.
.Ip "2f." 8
.IX Item "2f."
If the option \fI\*(--allow-is-default\fR is not used then access will
be denied, otherwise goto 2g.
.Ip "2g." 8
.IX Item "2g."
If the action of the matching rules is \fIdeny\fR then \fBupgpverify\fR will
exit with code 100; otherwise (if the action is \fIaccept\fR) then
the message is accepted, and a number of environment variables
may be set.
.RE
.RS 4
.RE
.Sh "Payload Handling"
.IX Subsection "Payload Handling"
The payload is the signed part of the message. 
The client program may read the payload of the message from the
file descriptor denoted by the environment variable \fI\s-1MESSAGE_FD\s0\fR
(the full message is available on file descriptor 0).
.PP
\&\fBupgpverify\fR removes all traces from quoted-printable and
base64 from the payload if the payload isn't a structured 
\&\s-1MIME\s0 entity.
.PP
The payload starts with zero or more headers containing \s-1MIME\s0 information,
followed by an empty line, followed by a text. If there's no \s-1MIME\s0
information than the payload starts with an empty line.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Ip "\-G, \-\-gpg" 8
.IX Item "-G, --gpg"
Use \s-1GNU\s0 privacy guard to verify messages. This is the default anyway. 
.Sp
\&\fBupgpverify\fR expects the \s-1GPG\s0 program to reside in \f(CW$PATH\fR and to be named 
\&\fIgpg\fR. If this true you might use the \fI\*(--program\fR option to select
a suitable binary.
.Ip "\-2, \-\-pgp2" 8
.IX Item "-2, --pgp2"
Use \s-1PGP\s0 version 2.6.3 to verify messages.
.Sp
\&\fBupgpverify\fR expects the \s-1PGP\s0 program to reside in \f(CW$PATH\fR and to be named 
\&\fIpgp\fR. If this true you might use the \fI\*(--program\fR option to select
a suitable binary.
.Ip "\-5, \-\-pgp5" 8
.IX Item "-5, --pgp5"
Use \s-1PGP\s0 version 5 to verify messages.
.Sp
\&\fBupgpverify\fR expects the \s-1PGP\s0 signature verification program to reside 
in \f(CW$PATH\fR and to be named 
\&\fIpgpv\fR. If this true you might use the \fI\*(--program\fR option to select
a suitable binary.
.Ip "\-e, \-\-exec=PROGRAM" 8
.IX Item "-e, --exec=PROGRAM"
Use this \fI\s-1PROGRAM\s0\fR instead of the default to check the
messages.
.Ip "\-G, \-\-allow-key-retrieve" 8
.IX Item "-G, --allow-key-retrieve"
Allow \fI\s-1GPG\s0\fR to get missing keys from a key server.
\&\fI\s-1GPG\s0\fR by default tries to retrieve missing public keys
from a key server. The \fBupgpverify\fR default since version
0.3.2 is to disable this.  
.Sp
If you want to automatically retrieve keys then use                             this option, which is ignored for \fI\s-1PGP2\s0\fR and \fI\s-1PGP5\s0\fR.
.Ip "\-P, \-\-passphrase-fd=FD" 8
.IX Item "-P, --passphrase-fd=FD"
This option is passed to the program used to decrypt a
message. \fI\s-1FD\s0\fR is a file handle, the external program
will try to read a passphrase from it.
.Sp
Use like this:
.Sp
.Vb 1
\&  | upgpverify -P 3 tmp payload_handling_program 3<secret/passphrase
.Ve
where \fIsecret/passphrase\fR is a file containing the passphrase of the
key.
.Ip "\-p, \-\-pubring=PUBRING" 8
.IX Item "-p, --pubring=PUBRING"
Select public key ring. \fI\s-1PUBRING\s0\fR stands for a file name.
.Sp
Note that \s-1PGP5\s0 (not \s-1GPG\s0) will read the key ring in
\&\f(CW$HOME\fR/.pgp anyway, unless it's nonexistant.
.Sp
Note that at least \s-1PGP2\s0 has silly limitations on the 
length of the \fI\s-1PGPPATH\s0\fR and \fI\s-1HOME\s0\fR environment variables,
if they are more than 50 characters long then pgp version 2
will ignore them.
.Ip "\-r, \-\-rules=RULESFILE" 8
.IX Item "-r, --rules=RULESFILE"
Follow the rules compiled into \fI\s-1RULESFILE\s0\fR by upgprules.
These rules may specify setting environment variables or denying
access from certain keys.
.Ip "\-A, \-\-allow-is-default" 8
.IX Item "-A, --allow-is-default"
If now rule matches then allow access anyway. The default, if
this option is not used, is to deny access.
.Ip "\-s, \-\-secring=SECRING" 8
.IX Item "-s, --secring=SECRING"
Select secret key ring. \fI\s-1SECRING\s0\fR stands for a file name.
.Sp
Note that \s-1PGP5\s0 (not \s-1GPG\s0) will read the key ring in
\&\f(CW$HOME\fR/.pgp anyway, unless it's nonexistant.
.Sp
Note that at least \s-1PGP2\s0 has silly limitations on the 
length of the \fI\s-1PGPPATH\s0\fR and \fI\s-1HOME\s0\fR environment variables,
if they are more than 50 characters long then pgp version 2
will ignore them.
.Ip "\-x, \-\-allow-x-pgp-sig" 8
.IX Item "-x, --allow-x-pgp-sig"
.Ip "\-X, \-\-require-x-pgp-sig" 8
.IX Item "-X, --require-x-pgp-sig"
These options turn on handling of articles with an \fIX-PGP-Sig\fR
header. This is a special format of \s-1PGP\s0 signed messages backwards
compatible with the existing news standards which allows the
signing of header fields (to guard against replay attacks with 
of control messages).
.Sp
The \fI\*(--allow-x-pgp-sig\fR turns on handling of these articles,
but also handles other kinds of signatures. The \fI\*(--require-x-pgp-sig\fR
mode doesn't handle any other kind of signature.
.Ip "\-M, \-\-max-len \s-1BYTES\s0" 8
.IX Item "-M, --max-len BYTES"
Allow incoming messages up to \s-1BYTES\s0 bytes. Default is 1000000.
Use a value of 0 to disable length checks.
.Ip "\*(--version" 8
.IX Item "version"
Show version information.
.Ip "\*(--help" 8
.IX Item "help"
Show a list of options or the long help on one.
.Sp
The use with an argument shows the long helptext
of that option, without an argument it will list
all options.
.Ip "\*(--longhelp" 8
.IX Item "longhelp"
Show longer help texts for all or one variable
.Sp
The use with an argument shows the long help for
this option, without arguments it shows the long
description of all options.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
\&\fBupgpverify\fR sets the following environment variables:
.Ip "\s-1HEADER_FROM\s0" 8
.IX Item "HEADER_FROM"
This environment variable contains the \fIfrom\fR mail header.
All characters with \s-1ASCII\s0 code below 32 are deleted.
.Sp
No \s-1MIME\s0 handling is done on this header.
.Sp
This environment variable is under the influence of a possibly
malicious entity.
.Ip "\s-1HEADER_SENDER\s0" 8
.IX Item "HEADER_SENDER"
This environment variable contains the \fIsender\fR mail header.
It's treated like \fI\s-1HEADER_FROM\s0\fR, above.
.Sp
Note that you might be more interested in the variables 
set by qmail (see the qmail-command manual page for more
information).
.Ip "\s-1HEADER_TO\s0" 8
.IX Item "HEADER_TO"
This environment variable contains the \fIto\fR mail header.
It's treated like \fI\s-1HEADER_TO\s0\fR, above.
.Sp
Note that you might be more interested in the variables 
set by qmail (see the qmail-command manual page for more
information).
.Ip "\s-1HEADER_SUBJECT\s0" 8
.IX Item "HEADER_SUBJECT"
This environment variable contains the \fIsubject\fR mail header.
It's treated like \fI\s-1HEADER_FROM\s0\fR, above.
.Ip "\s-1HEADER_CC\s0" 8
.IX Item "HEADER_CC"
This environment variable contains the \fI\s-1CC\s0\fR mail header.
It's treated like \fI\s-1HEADER_FROM\s0\fR, above.
.Ip "\s-1HEADER_REPLY_TO\s0" 8
.IX Item "HEADER_REPLY_TO"
This environment variable contains the \fIReply-To\fR mail header.
It's treated like \fI\s-1HEADER_FROM\s0\fR, above.
.Ip "\s-1HEADER_FOLLOWUP_TO\s0" 8
.IX Item "HEADER_FOLLOWUP_TO"
This environment variable contains the \fIFollowup-To\fR mail header.
It is only set if the message is a news article with \fIX-PGP-Sig\fR
header and handling of that form of \s-1PGP\s0 signature has been
turned on.
It's otherwise treated like \fI\s-1HEADER_FROM\s0\fR, above.
.Ip "\s-1HEADER_NEWSGROUPS\s0" 8
.IX Item "HEADER_NEWSGROUPS"
This environment variable contains the \fIFollowup-To\fR mail header.
It is only set if the message is a news article with \fIX-PGP-Sig\fR
header and handling of that form of \s-1PGP\s0 signature has been
turned on.
It's treated like \fI\s-1HEADER_FROM\s0\fR, above.
.Ip "\s-1MESSAGE_FD\s0" 8
.IX Item "MESSAGE_FD"
The file descriptor the \s-1PGP\s0 payload may be read from.
.Ip "\s-1AUTH_FINGERPRING\s0" 8
.IX Item "AUTH_FINGERPRING"
The fingerprint of the signer key (only available with gpg)
.Ip "\s-1AUTH_KEYID\s0" 8
.IX Item "AUTH_KEYID"
The key id of the signer key.
.Ip "\s-1AUTH_LONG_KEYID\s0" 8
.IX Item "AUTH_LONG_KEYID"
The long key id of the signer key (only available with gpg)
.Ip "\s-1AUTH_USERID\s0" 8
.IX Item "AUTH_USERID"
The user id of the signer key.
.PP
Aside from these environment variables it's possible to set a 
number of further environment variables in the rules file.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Sh "Keep Out Messages From Unknown Sources"
.IX Subsection "Keep Out Messages From Unknown Sources"
\&.qmail:
.PP
.Vb 2
\&    |upgpverify 
\&        |./Maildir/
.Ve
.Sh "Execute Shell Commands"
.IX Subsection "Execute Shell Commands"
.Vb 2
\&        | upgpverify --ring=special.pub tmpdir sh -c \e
\&          'exec /bin/sh - <&$MESSAGE_FD'
.Ve
on one line, please. It's not necessarily a sign of security to do
this.
.SH "BUGS"
.IX Header "BUGS"
Doesn't get fingerprint and long key id from \s-1PGP5\s0 and \s-1PGP2\s0. There's
a way to get the fingerprint: get the short key, list the fingerprint 
through pgpk \-ll, and parse that. I consider this ugly as hell. 
.SH "THOUGHTS"
.IX Header "THOUGHTS"
.Ip "\(bu" 4
At least gpg doesn't check for write errors in a lot of cases.
.Ip "\(bu" 4
Should be able to pass \fIunchanged\fR (as q-p or b64) body parts to 
the program _if_ and only if the signed part is a multipart 
itself. May set \f(CW$MIME\fR to 1 and demand that people parse the 
payload. 
.Sp
Make that an option?
.SH "AUTHOR"
.IX Header "AUTHOR"
Uwe Ohse
.SH "SEE ALSO"
.IX Header "SEE ALSO"
upgprules(8)

