#! /bin/sh

if test "x$GPG" = x ; then GPG=gpg ; fi

. docheck.vars

PROGOPT="--gpg"
EXECOPT="--exec=$GPG"
MOVE_PUBRING_AWAY="mv .gnupg/pubring.gpg .gnupg/pubring.away"
MOVE_PUBRING_BACK="mv .gnupg/pubring.away .gnupg/pubring.gpg"
ALTERNATIVE_PUBRING=".gnupg/pubring.away"

. $O/docheck.sub

echo "--- upgpverify --gpg rules work with long key id"
cat >rules.txt <<EOF
l*5B86ABE571EC423D:allow,TEST="TESTRESULT"
EOF
$O/upgprules rules.cdb rules.t <rules.txt 
e -r rules.cdb tmp $PRINTENV TEST <$O/testmail1
echo "--- upgpverify --gpg rules work with fingerprint"
cat >rules.txt <<EOF
f*D1076FB6107A40F11DD9E6C67336FF68:allow,TEST="TESTRESULT"
EOF
$O/upgprules rules.cdb rules.t <rules.txt 
e -r rules.cdb tmp $PRINTENV TEST <$O/testmail1
echo "--- upgpverify --gpg decryption works in MIME mode"
cat >rules.txt <<EOF
l*C3BF9881BEBF66B0:allow,TEST="TESTRESULT"
EOF
$O/upgprules rules.cdb rules.t <rules.txt 
e --passphrase-fd 9 -r rules.cdb tmp $PRINTENV <$O/testmail11 9<passphrase \
	| sort  | egrep -v "^(PATH|HOME|MESSAGE_FD)"
echo "--- upgpverify --gpg decryption works in MIME mode with corrupted message"
e --passphrase-fd 9 -r rules.cdb tmp $PRINTENV <$O/testmail12 9<passphrase
echo $?
echo "--- upgpverify --gpg decryption works in traditional mode"
e --passphrase-fd 9 -r rules.cdb tmp $PRINTENV <$O/testmail13 9<passphrase \
	| sort  | egrep -v "^(PATH|HOME|MESSAGE_FD)"
echo "--- upgpverify --gpg decryption works in trad. mode with corrupted message"
e --passphrase-fd 9 -r rules.cdb tmp $PRINTENV <$O/testmail14 9<passphrase
echo $?
# this should be generic, but pgp2 can't handle this message.
echo "--- upgpverify --gpg handles missing empty line before boundary (DSA,NM)"
e tmp sh -c 'cat <&$MESSAGE_FD' <$O/testmail27
echo ; echo $?
echo "--- upgpverify --gpg handles missing empty line before bound. (DSA,MIME)"
e tmp sh -c 'cat <&$MESSAGE_FD' <$O/testmail29
echo ; echo $?
