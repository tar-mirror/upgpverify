.\" Automatically generated by Pod::Man version 1.04
.\" Tue Sep 11 08:24:18 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "UPGPRULES 1"
.TH UPGPRULES 1 "0.3.5" "2001-09-03" "upgpverify"
.UC
.SH "NAME"
.Vb 1
\&         upgprules - compile rules for upgpverify
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
upgpverify \s-1CDB\s0 \s-1TMP\s0 [\s-1INPUT\s0]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBupgpverify\fR verifies, if told to do so, whether the signing key
matches the rules in \fI\s-1CDB\s0\fR.
.PP
\&\fBupgprules\fR compiles the rules in \fI\s-1INPUT\s0\fR (or stdin) into \fI\s-1CDB\s0\fR,
a binary format suited for quick access by \fBupgpverify\fR.
.PP
\&\fBupgprules\fR can be used while \fBupgpverify\fR is running. It ensures that cdb
is updated atomically. It does this by first writing the rules to tmp
and then moving tmp on top of cdb. If tmp already exists, it is
destroyed. The directories containing cdb and tmp must be writable to
tcprules; they must also be on the same filesystem.
.PP
If there is a problem with the input or with tmp, \fBupgprules\fR complains
and leaves cdb alone.
.PP
The binary cdb format is portable across machines.
.SH "RULE FORMAT"
.IX Header "RULE FORMAT"
\&\fI\s-1INPUT\s0\fR lines starting with a hash (#) are ignored, as are empty
lines. All other lines are rules.
.PP
Each rule consists of an identification, a colon, an instruction
and a list of environment variable assignments.
.Sh "Identifications"
.IX Subsection "Identifications"
An identification is a tag character followed by a star (*) symbol
and a free-form string. The later must not contain a colon (:).
.PP
The tag character is used to distinguish the five different kinds of 
identifications, which are listed in order of preference:
.Ip "f" 4
.IX Item "f"
A \fIfingerprint\fR, only available if \s-1GNU\s0 privacy guard (gpg) is used.
.Ip "l" 4
.IX Item "l"
A \fIlong key id\fR, only available if \s-1GNU\s0 privacy guard (gpg) is used.
.Ip "s" 4
.IX Item "s"
A \fIshort key id\fR.
.Ip "u" 4
.IX Item "u"
A \fIUser \s-1ID\s0\fR: A free-form string. Note that the \fIUser \s-1ID\s0\fR may
be choosen freely by an attacker (so watch out what you are doing).
.Ip "a" 4
.IX Item "a"
An \fIemail address\fR. \fIupgpverify\fR parses the user id of the signing
key and looks up every email address found in it against the database.
.PP
The preference mentioned above is my personal preference. While the
email address may be quite handy it's important \fBnot\fR to forget
that strange things might happen if you accept a public key which
contains the email address of someone else \- who might have more
rights than the owner of the key (this also applies, to a lesser
degree, to the user \s-1ID\s0).
.Sh "Instructions"
.IX Subsection "Instructions"
There are two:
.Ip "allow" 4
.IX Item "allow"
.Ip "deny" 4
.IX Item "deny"
.Sh "Environment Variable Assignments"
.IX Subsection "Environment Variable Assignments"
An environment variable assignment contains a comma (,),
a variable name, an equal sign (=), a quote character,
a value and another quote character. The quote character
may be choosen freely. Another assignment may follow.
.PP
The general form of an assignment is \fB,var=\*(L"value\*(R"\fR, where
\&\fI"\fR may be any character not found in \fIvalue\fR.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 7
\&    upgprules etc/rules.cdb etc/rules.t <<EOF
\&    a*uwe@ohse.de:allow,why=%address%
\&    s*71EC423D:allow,why="short key id"
\&    s*5B86ABE571EC423D:allow,why="long key id"
\&    u*Uwe Ohse (RSA) <uwe@ohse.de>:allow,why=%uid%
\&    f*D1076FB6107A40F11DD9E6C67336FF68:allow,why=/fingerprint/
\&        EOF
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Uwe Ohse
.SH "SEE ALSO"
.IX Header "SEE ALSO"
upgprules(8)

